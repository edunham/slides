"Life is better with Rust's community automation" 

What have we automated?

Starting with the obvious, some of our practices "automate" sorting new
contributors so that more mentoring time can go to people who're motivated to
succeed. 

* Code of conduct present from the beginning drives away people who value
  their right to be jerks over others' right to have a welcoming environment

* Presence on diverse platforms -- Reddit, appreciation of blogs through HN,
  stackoverflow, forums, IRC -- funnels in the social media savvy. especially
  relevant is how widely core team members use Reddit, and are around to help
  answer questions

Not Rocket Science Rule

(doesn't this mean we have to say no to a lot of people and make them feel
bad?)

Being told no by a person hurts. Being told your code is wrong doesn't feel
good. Telling a passionate newbie that their code is bad is unpleasant, and
having to do it a lot can make you grumpy. We address this problem with
robots!

* Homu/Bors https://github.com/graydon/bors https://github.com/barosl/homu

TODO: How bors works
    * How to set up Homu on a repo
    * How to run Homu with a buildbot
    * Where to start integrating other CI systems

Welcoming newbies, and remembering to say hi on pull requests from new
contributors, is hard. Remembering who's brand new and who's gotten code in
before can get difficult as a project grows, but the way you treat someone on
their first contribution will be different from on their second because
there's stuff you should or shouldn't expect them to know. Mixing it up causes
confusion and condescention, respectively, neither of which is good. 

Enter Highfive! https://github.com/nrc/highfive

TODO: How highfive works
    * How to set up a highfive on a repo
    * How highfive decides who to assign as a reviewer

Getting existing open source contributors onto the issues that matter and can
be done by someone new to the project is tricky. We're lucky to have jdm,
who's built a bunch of neat tooling around this for Mozilla and pointed stuff
out in some slides... links in
http://edunham.net/2015/11/04/beyond_openhatch.html

Getting people to behave like humans on a mailing list is absurdly difficult.
(also maintianing a mailserver is deeply unfun especially without a dedicated
sysadmin). Addressed with Discourse (https://users.rust-lang.org/,
https://internals.rust-lang.org/) which allows nagging people to be nice on
their first 2 posts, and deletion of abusive content. Plus it's a big
reasonably-well-behaved archive, less work required to link into a
modern-looking post than a classic mailing list. 

The Usual Chatops Stuff
-----------------------

Rust infra is not as good at this as many other places; team of 1 fulltime
infra person has been slowly trying to deploy it through 9 months so far of
also putting out fires and meeting quarterly goal improvements. 

Tbh, we don't even have a mature/robust monitoring solution. Why not? Worse
fires. 

Shockingly easy improvements: 

* Bots channel for each project
* Buildbot reporting into the channel 
* IRC client highlights on the important messages (slave lost exceptions, etc)

The Soft-Skills Stuff
---------------------

I've noticed that these teams are composed of people who cultivate the skill
of expressing gratitude. Priorities/values include having a good experience
for contributors. 

*habits are a form of brain automation*. The *habits* of clearly explaining
reasons for a decision, having conversations publicly/openly,
welcoming/respecting relevant feedback from contributors of all levels, being
polite, reqiuring civil conduct in our shared spaces, and automating
everything we can are what make all the computer automation successful.
Without a habit of using it, all the computer automation in the world is
pretty useless -- people don't have a chance to be nagged by your
contributing.md on a PR if they're in the habit of pushing straight to master
and skipping the PR in the first place. 



The motivational part: 
---------------------


I spend most of my time in a physical or virtual room
full of compiler wizards whose topics of casual chitchat are often NP-hard.
Thir knowledge is a stark contrast against my "I have most of a CS degree and
one time I took a class where I wrote some nasty python to turn a toy Lisp
into a toy Forth". And yet I'm still useful to them, because servers. 

Parting Trick: Never underestimate the power of the constructive criticism
you'll get from publicly claiming something incorrect. 


Include...
==============================================================================

https://github.com/rust-lang-nursery/
https://github.com/rust-lang-deprecated/
(why do we have these?)
https://github.com/carols10cents/rustlings
https://doc.rust-lang.org/stable/book/bibliography.html
